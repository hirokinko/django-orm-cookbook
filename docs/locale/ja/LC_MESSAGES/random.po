# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Agiliq
# This file is distributed under the same license as the Django ORM Cookbook
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Django ORM Cookbook 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-29 11:36+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../random.rst:2
msgid "How to efficiently select a random object from a model?"
msgstr ""

#: ../../random.rst:4
msgid "Your :code:`category` models is like this."
msgstr ""

#: ../../random.rst:18
msgid ""
"You want to get a random Category. We will look at few alternate ways to "
"do this."
msgstr ""

#: ../../random.rst:20
msgid ""
"The most straightforward way, you can :code:`order_by` random and fetch "
"the first record. It would look something like this."
msgstr ""

#: ../../random.rst:27
msgid ""
"Note: :code:`order_by('?')` queries may be expensive and slow, depending "
"on the database backend youâ€™re using. To test other methods, we need to "
"insert one million records in :code:`Category` table. Go to your db like "
"with :code:`python manage.py dbshell` and run this."
msgstr ""

#: ../../random.rst:36
msgid ""
"You don't need to understand the full details of the sql above, it "
"creates one million numbers and :code:`md5-s` them to generate the name, "
"then inserts it in the DB."
msgstr ""

#: ../../random.rst:38
msgid ""
"Now, instead of sorting the whole table, you can get the max id, generate"
" a random number in range [1, max_id], and filter that. You are assuming "
"that there have been no deletions."
msgstr ""

#: ../../random.rst:61
msgid ""
"If your models has deletions, you can slightly modify the functions, to "
"loop until you get a valid :code:`Category`."
msgstr ""

#: ../../random.rst:80
msgid ""
"Unless your model has a lot of deletions, the :code:`while True:` loop "
"return quickly. Lets use :code:`timeit` to see the differences."
msgstr ""

#: ../../random.rst:90
msgid ""
":code:`get_random3` is about 283 time faster than :code:`get_random`. "
":code:`get_random` is the most generic way, but the technique in "
":code:`get_random3` will work unless you change changed the default way "
"Django generates the id - autoincrementing integers, or there have been "
"too many deletions."
msgstr ""

