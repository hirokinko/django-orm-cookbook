# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Agiliq
# This file is distributed under the same license as the Django ORM Cookbook
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Django ORM Cookbook 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-29 11:36+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../or_query.rst:2
msgid "How to do OR queries in Django ORM?"
msgstr ""

#: ../../or_query.rst:6
msgid ""
"If you are using :code:`django.contrib.auth`, you will have a table "
"called :code:`auth_user`. It will have fields as :code:`username`, "
":code:`first_name`, :code:`last_name` and more."
msgstr ""

#: ../../or_query.rst:8
msgid ""
"A common requirement is performing :code:`OR` filtering with two ore more"
" conditions. Say you want find all users with firstname starting with 'R'"
" and last_name starting with 'D'."
msgstr ""

#: ../../or_query.rst:10
msgid "Django provides two options."
msgstr ""

#: ../../or_query.rst:12
msgid ":code:`queryset_1 | queryset_2`"
msgstr ""

#: ../../or_query.rst:13
msgid ":code:`filter(Q(<condition_1>)|Q(<condition_2>)`"
msgstr ""

#: ../../or_query.rst:16
msgid "The query in detail"
msgstr ""

#: ../../or_query.rst:18
msgid "The SQL query for the above condition will look something like ::"
msgstr ""

#: ../../or_query.rst:24
msgid "Similarly our ORM query would look like"
msgstr ""

#: ../../or_query.rst:36
msgid "You can also look at the generated query."
msgstr ""

#: ../../or_query.rst:47
msgid "Alternatively, you can use the :code:`Q` objects."
msgstr ""

#: ../../or_query.rst:54
msgid "If you look at the generated query, the result is exactly the same"
msgstr ""

