# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Agiliq
# This file is distributed under the same license as the Django ORM Cookbook
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Django ORM Cookbook 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-29 11:36+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../generic_models.rst:2
msgid ""
"How to create a generic model which can be related to any kind of entity?"
" (Eg. a Category or a Comment?)"
msgstr ""

#: ../../generic_models.rst:5
msgid "You have models like this."
msgstr ""

#: ../../generic_models.rst:29
msgid ""
":code:`Category` can be applied is a `generic` model. You prbably want to"
" be able to apply categories to objects form any model class. You can do "
"it like this"
msgstr ""

#: ../../generic_models.rst:58
msgid ""
"What did we do, we added we added a :code:`GenericForeignKey` fields on "
":code:`FlexCategory` using one :code:`ForeignKey` and one "
":code:`PositiveIntegerField`, then added a :code:`GenericRelation` on the"
" models you want to categorize."
msgstr ""

#: ../../generic_models.rst:62
msgid "At the database level it looks like this:"
msgstr ""

#: ../../generic_models.rst:74
msgid "You can categorize a :code:`Hero` like this."
msgstr ""

#: ../../generic_models.rst:81
msgid "And then get a :code:`Hero` categorised as 'ghost' like this"
msgstr ""

#: ../../generic_models.rst:87
msgid "This gives us this sql."
msgstr ""

