# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Agiliq
# This file is distributed under the same license as the Django ORM Cookbook
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Django ORM Cookbook 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-29 11:36+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../query_relatedtool.rst:2
msgid "How to use :code:`Q` objects for complex queries?"
msgstr ""

#: ../../query_relatedtool.rst:4
msgid ""
"In previous chapters we used :code:`Q` objects for :code:`OR` and "
":code:`AND` and :code:`NOT` operations. :code:`Q` objects provides you "
"complete control over the where clause of the query."
msgstr ""

#: ../../query_relatedtool.rst:6
msgid "If you want to :code:`OR` your conditions."
msgstr ""

#: ../../query_relatedtool.rst:17
msgid "If you want to :code:`AND` your conditions."
msgstr ""

#: ../../query_relatedtool.rst:27
msgid ""
"If you want to find all users whose :code:`first_name` starts with 'R', "
"but not if the :code:`last_name` has 'Z'"
msgstr ""

#: ../../query_relatedtool.rst:36
msgid "If you look at the generated query, you would see"
msgstr ""

#: ../../query_relatedtool.rst:55
msgid ""
"You can combine the Q objects in more complex ways to generate complex "
"queries."
msgstr ""

